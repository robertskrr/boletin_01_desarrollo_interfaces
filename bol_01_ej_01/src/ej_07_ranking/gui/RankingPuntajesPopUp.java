/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ej_07_ranking.gui;

import ej_07_ranking.dto.Jugador;
import ej_07_ranking.logica.LogicaRanking;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Robert
 */
public class RankingPuntajesPopUp extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(RankingPuntajesPopUp.class.getName());

    private DefaultTableModel dtm;

    /**
     * Creates new form RankingPuntajes
     */
    public RankingPuntajesPopUp() {
        initComponents();
        configTabla();
        //addTableHeaderClickListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelImgCopa = new javax.swing.JLabel();
        jLabelTitulo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableJugadores = new javax.swing.JTable();
        jButtonAleatorio = new javax.swing.JButton();
        jButtonManual = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelImgCopa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ej_07_ranking/imgs/copa.png"))); // NOI18N
        jLabelImgCopa.setText(org.openide.util.NbBundle.getMessage(RankingPuntajesPopUp.class, "RankingPuntajesPopUp.jLabelImgCopa.text_1")); // NOI18N
        jLabelImgCopa.setMinimumSize(new java.awt.Dimension(15, 20));

        jLabelTitulo.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabelTitulo.setText(org.openide.util.NbBundle.getMessage(RankingPuntajesPopUp.class, "RankingPuntajesPopUp.jLabelTitulo.text_1")); // NOI18N

        jTableJugadores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Jugador", "Puntuación", "Nivel"
            }
        ));
        jScrollPane1.setViewportView(jTableJugadores);

        jButtonAleatorio.setBackground(new java.awt.Color(102, 255, 102));
        jButtonAleatorio.setForeground(new java.awt.Color(0, 0, 0));
        jButtonAleatorio.setText(org.openide.util.NbBundle.getMessage(RankingPuntajesPopUp.class, "RankingPuntajesPopUp.jButtonAleatorio.text_1")); // NOI18N
        jButtonAleatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAleatorioActionPerformed(evt);
            }
        });

        jButtonManual.setBackground(new java.awt.Color(255, 204, 51));
        jButtonManual.setForeground(new java.awt.Color(0, 0, 0));
        jButtonManual.setText(org.openide.util.NbBundle.getMessage(RankingPuntajesPopUp.class, "RankingPuntajesPopUp.jButtonManual.text_1")); // NOI18N
        jButtonManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonManualActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jButtonAleatorio)
                        .addGap(51, 51, 51)
                        .addComponent(jButtonManual))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabelImgCopa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelTitulo)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelImgCopa, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelTitulo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonAleatorio, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonManual, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAleatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAleatorioActionPerformed
        addAleatorio();
    }//GEN-LAST:event_jButtonAleatorioActionPerformed

    private void jButtonManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonManualActionPerformed
        addManual();
    }//GEN-LAST:event_jButtonManualActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new RankingPuntajesPopUp().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAleatorio;
    private javax.swing.JButton jButtonManual;
    private javax.swing.JLabel jLabelImgCopa;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableJugadores;
    // End of variables declaration//GEN-END:variables

    /**
     * Añade un jugador aleatorio
     */
    private void addAleatorio() {
        Random random = new Random();
        // --NOMBRE ALEATORIO--
        ArrayList<String> nombres = new ArrayList<>(Arrays.asList("Ana", "Elena", "Manolo", "Paco", "Manuel", "Palomo", "Ismail", "Silvia", "Carlos", "Benito"));

        // Selecciona un indice aleatorio teniendo en cuenta el tamaño del array
        int indiceRandomNombre = random.nextInt(nombres.size());
        String nombreAleatorio = nombres.get(indiceRandomNombre);

        // --PUNTUACIÓN ALEATORIA--
        int puntuacionAleatoria = random.nextInt(100000);

        // --NIVEL ALEATORIO--
        int nivelAleatorio = random.nextInt(500);

        // Crea al jugador y lo añade a la tabla
        Jugador jugadorAleatorio = new Jugador(nombreAleatorio, puntuacionAleatoria, nivelAleatorio);
        LogicaRanking.addJugador(jugadorAleatorio);
        // Actualiza la tabla una vez añadido el nuevo jugador
        configTabla();
    }

    /**
     * Configura la tabla con los valores estimados de ordenación y columnas
     */
    private void configTabla() {
        dtm = new DefaultTableModel();
        // Array de títulos
        String[] titulos = new String[]{"Jugador", "Puntuación", "Nivel"};
        // Asignamos los titulos
        dtm.setColumnIdentifiers(titulos);

        // Asignamos a cada columna los datos de la lista de jugadores
        LogicaRanking.getListaJugadores().forEach(j -> dtm.addRow(new Object[]{j.getNombre(), j.getPuntuacion(), j.getNivel()}));
        jTableJugadores.setModel(dtm);

        // --ORDENAR TABLA--
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTableJugadores.getModel());
        jTableJugadores.setRowSorter(sorter);
        // Crear una lista de claves de ordenación (columna y dirección)
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(1, SortOrder.DESCENDING));
        sorter.setSortKeys(sortKeys);

        sorter.sort();
    }

    /**
     * Añade al jugador manualmente
     */
    private void addManual() {
        String nombre = null;
        String puntuacionString = null;
        String nivelString = null;
        int puntuacion = -1;
        int nivel = -1;

        // -- SOLICITA NOMBRE --
        do {
            nombre = JOptionPane.showInputDialog(this, "Introduzca el nombre del jugador", "JUGADOR", JOptionPane.QUESTION_MESSAGE);
            if (nombre == null) {
                JOptionPane.showMessageDialog(this, "Has cancelado la gestión", "Aviso", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (nombre.length() == 0) {
                JOptionPane.showMessageDialog(this, "INTRODUCE UN NOMBRE POR FAVOR", "ERROR", JOptionPane.WARNING_MESSAGE);
            }
        } while (nombre.length() == 0);
        // -- SOLICITA PUNTUACIÓN --
        do {
            puntuacionString = JOptionPane.showInputDialog(this, "Introduzca la puntuación", "PUNTUACIÓN", JOptionPane.QUESTION_MESSAGE);
            if (puntuacionString == null) {
                JOptionPane.showMessageDialog(this, "Has cancelado la gestión", "Aviso", JOptionPane.WARNING_MESSAGE);
                return;
            }
            puntuacionString = puntuacionString.trim(); // Por si han puesto espacios
            puntuacion = -1;
            try {
                if (puntuacionString.length() > 0) {
                    puntuacion = Integer.parseInt(puntuacionString); // Lo convierte a int

                    if (puntuacion < 0) {
                        JOptionPane.showMessageDialog(this, "INTRODUCE UNA PUNTUACIÓN POSITIVA POR FAVOR", "ERROR", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "INTRODUCE UNA PUNTUACIÓN POR FAVOR", "ERROR", JOptionPane.WARNING_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "VALOR DE PUNTUACIÓN NO NUMÉRICO VÁLIDO", "ERROR", JOptionPane.WARNING_MESSAGE);
                puntuacion = -1; // Forzar la repetición
            }
        } while (puntuacion < 0);
        // -- SOLICITA NIVEL --
        do {
            nivelString = JOptionPane.showInputDialog(this, "Introduzca el nivel", "NIVEL", JOptionPane.QUESTION_MESSAGE);
            if (nivelString == null) {
                JOptionPane.showMessageDialog(this, "Has cancelado la gestión", "Aviso", JOptionPane.WARNING_MESSAGE);
                return;
            }
            nivelString = nivelString.trim();
            nivel = -1;
            try {
                if (nivelString.length() > 0) {
                    nivel = Integer.parseInt(nivelString); // Lo convierte a int

                    if (nivel < 0) {
                        JOptionPane.showMessageDialog(this, "INTRODUCE UN NIVEL POSITIVO POR FAVOR", "ERROR", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "INTRODUCE UN NIVEL POR FAVOR", "ERROR", JOptionPane.WARNING_MESSAGE);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "VALOR DE NIVEL NO NUMÉRICO VÁLIDO", "ERROR", JOptionPane.WARNING_MESSAGE);
                nivel = -1; // Forzar la repetición
            }
        } while (nivel < 0);

        // AÑADIMOS EL JUGADOR
        Jugador jugador = new Jugador(nombre, puntuacion, nivel);
        LogicaRanking.addJugador(jugador);
        configTabla();
    }

    /**
     * Busca el jugador con más nivel
     *
     * @return
     */
    private Jugador buscarJugadorMaxNivel() {
        List<Jugador> jugadores = LogicaRanking.getListaJugadores();

        if (jugadores.isEmpty()) {
            return null;
        }

        return jugadores.stream()
                .max(Comparator.comparing(Jugador::getNivel))
                .get();
    }

    /**
     * Muestra al jugador con más nivel
     */
    private void mostrarJugadorConMasNivel() {
        Jugador jugadorMaxNivel = buscarJugadorMaxNivel();

        if (jugadorMaxNivel == null) {
            JOptionPane.showMessageDialog(this, "No hay jugadores registrados", "ERROR", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String mensaje = "Jugador con más nivel --> " + jugadorMaxNivel.getNombre() + " con el nivel: " + jugadorMaxNivel.getNivel();
        JOptionPane.showMessageDialog(this, mensaje, "MÁX NIVEL", JOptionPane.INFORMATION_MESSAGE);
    }

    /*
    private void addTableHeaderClickListener() {

        JTableHeader encabezado = jTableJugadores.getTableHeader();

        encabezado.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent evt) {

                int columnaVisual = encabezado.columnAtPoint(evt.getPoint());

                // CONVERTIR AL ÍNDICE DEL MODELO 
                int columnaModelo = jTableJugadores.convertColumnIndexToModel(columnaVisual);

                // Verificamos si la columna pulsada es "Nivel" (índice 2)
                if (columnaModelo == 2) {
                    mostrarJugadorConMasNivel();
                    evt.consume();
                }
            }
        });
        
    }*/
}
